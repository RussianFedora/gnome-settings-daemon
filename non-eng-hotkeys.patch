diff -rupN gnome-settings-daemon-3.8.5.orig/plugins/keyboard/gsd-keyboard-manager.c gnome-settings-daemon-3.8.5/plugins/keyboard/gsd-keyboard-manager.c
--- gnome-settings-daemon-3.8.5.orig/plugins/keyboard/gsd-keyboard-manager.c	2013-09-05 13:45:20.000000000 +0400
+++ gnome-settings-daemon-3.8.5/plugins/keyboard/gsd-keyboard-manager.c	2013-11-20 13:23:13.000000000 +0400
@@ -148,6 +148,8 @@ static const gchar introspection_xml[] =
 
 static gpointer manager_object = NULL;
 
+static guint group_position = 0;
+
 static void
 init_builder_with_sources (GVariantBuilder *builder,
                            GSettings       *settings)
@@ -692,11 +694,6 @@ upload_xkb_description (const gchar
         XkbDescRec *xkb_desc;
         gchar *rules_file;
 
-        /* The layout we want is always in the first XKB group index
-         * so we should enforce it to make sure we never end up with
-         * the wrong one. */
-        XkbLockGroup (display, XkbUseCoreKbd, 0);
-
         /* Upload it to the X server using the same method as setxkbmap */
         xkb_desc = XkbGetKeyboardByName (display,
                                          XkbUseCoreKbd,
@@ -711,6 +708,10 @@ upload_xkb_description (const gchar
 
         XkbFreeKeyboard (xkb_desc, 0, True);
 
+        /* The index of layout we want is saved in the group_position
+         * variable. */
+        XkbLockGroup (display, XkbUseCoreKbd, group_position);
+
         rules_file = g_path_get_basename (rules_file_path);
 
         if (!XkbRF_SetNamesProp (display, rules_file, var_defs))
@@ -845,10 +846,34 @@ replace_layout_and_variant (GsdKeyboardM
         }
 
         free (xkb_var_defs->layout);
-        xkb_var_defs->layout = build_xkb_group_string (layout, locale_layout, latin_layout);
-
         free (xkb_var_defs->variant);
-        xkb_var_defs->variant = build_xkb_group_string (variant, locale_variant, latin_variant);
+
+        if (locale_layout && latin_layout) {
+                xkb_var_defs->layout = build_xkb_group_string (latin_layout, locale_layout, layout);
+                xkb_var_defs->variant = build_xkb_group_string (latin_variant, locale_variant, variant);
+
+                group_position = 2;
+        } else if (locale_layout && g_strcmp0(locale_layout, "us") == 0) {
+                xkb_var_defs->layout = build_xkb_group_string (locale_layout, layout, NULL);
+                xkb_var_defs->variant = build_xkb_group_string (locale_variant, variant, NULL);
+
+                group_position = 1;
+        } else if (locale_layout && g_strcmp0(locale_layout, "us") != 0) {
+                xkb_var_defs->layout = build_xkb_group_string (layout, locale_layout, NULL);
+                xkb_var_defs->variant = build_xkb_group_string (variant, locale_variant, NULL);
+
+                group_position = 0;
+        } else if (latin_layout) {
+                xkb_var_defs->layout = build_xkb_group_string (latin_layout, layout, NULL);
+                xkb_var_defs->variant = build_xkb_group_string (latin_variant, variant, NULL);
+
+                group_position = 1;
+        } else {
+                xkb_var_defs->layout = build_xkb_group_string (layout, NULL, NULL);
+                xkb_var_defs->variant = build_xkb_group_string (variant, NULL, NULL);
+
+                group_position = 0;
+        }
 }
 
 static gchar *
